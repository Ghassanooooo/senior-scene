{"version":3,"sources":["../cli/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\n// /*\n// /$$$$$$$$ /$$$$$$ / $$$$$$$ / $$$$$$$$ / $$$$$$ / $$ / $$ / $$$$$$ / $$$$$$$ / $$\n// | $$_____/|_  $$_/| $$__  $$| $$_____/ /$$__  $$| $$  | $$|_  $$_/| $$__  $$|__/\n// | $$        | $$  | $$  \\ $$| $$      | $$  \\__/| $$  | $$  | $$  | $$  \\ $$ /$$  /$$$$$$\n// | $$$$$     | $$  | $$$$$$$/| $$$$$   |  $$$$$$ | $$$$$$$$  | $$  | $$$$$$$/| $$ /$$__  $$\n// | $$__/     | $$  | $$__  $$| $$__/    \\____  $$| $$__  $$  | $$  | $$____/ | $$| $$  \\ $$\n// | $$        | $$  | $$  \\ $$| $$       /$$  \\ $$| $$  | $$  | $$  | $$      | $$| $$  | $$\n// | $$       /$$$$$$| $$  | $$| $$$$$$$$|  $$$$$$/| $$  | $$ /$$$$$$| $$ /$$  | $$|  $$$$$$/\n// |__/      |______/|__/  |__/|________/ \\______/ |__/  |__/|______/|__/|__/  |__/ \\______/\n// */\n\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport gradient from \"gradient-string\";\nimport chalkAnimation from \"chalk-animation\";\nimport figlet from \"figlet\";\nimport { createSpinner } from \"nanospinner\";\nimport { execa } from \"execa\";\nimport path from \"path\";\n\nimport { promises as fs } from \"fs\";\n\nimport { fileURLToPath } from \"url\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface Program {\n  projectType: \"Fullstack\" | \"Frontend\" | \"Backend\";\n  projectStack: \"React + vite\";\n  projectPath: string;\n}\n\nconst program: Program = {\n  projectType: \"Frontend\",\n  projectStack: \"React + vite\",\n  projectPath: \"./my-project\",\n};\n\nasync function appendToFile(filePath: string, content: string) {\n  try {\n    await fs.appendFile(filePath, content);\n  } catch (error) {\n    console.error(\"Error appending to file:\", error);\n  }\n}\n\nasync function downloadTemplate({ projectPath }: any) {\n  try {\n    const repoUrl = \"https://github.com/vitejs/vite.git\";\n    const templatePath = \"packages/create-vite/template-react\";\n    const destinationPath = path.join(__dirname, projectPath);\n\n    // Clone the repository\n    await execa(\"git\", [\"clone\", repoUrl, \"vite-temp\"]);\n\n    // Copy the template to the destination\n    await execa(\"cp\", [\"-R\", `vite-temp/${templatePath}/.`, destinationPath]);\n    // Remove the temporary cloned repository\n    await execa(\"rm\", [\"-rf\", \"vite-temp\"]);\n    await execa(\"mv\", [\"_gitignore\", \".gitignore\"], { cwd: destinationPath });\n    await execa(\"npm\", [\"install\"], {\n      cwd: destinationPath,\n    });\n    await execa(\"npm\", [\"install\", \"tailwindcss\", \"postcss\", \"autoprefixer\"], {\n      cwd: destinationPath,\n    });\n\n    // await execa(\"npx\", [\"tailwindcss\", \"init\", \"-p\"], { cwd: destinationPath });\n\n    await execa(\"rm\", [\"-rf\", \"src\"], { cwd: destinationPath });\n\n    // // Create src\n\n    await execa(\"mkdir\", [\"src\"], { cwd: destinationPath });\n    await execa(\"touch\", [\"index.css\"], { cwd: destinationPath + \"/src\" });\n    await appendToFile(\n      destinationPath + \"/src/index.css\",\n      \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\"\n    );\n\n    console.log(\"Template downloaded successfully\");\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n}\n\nconst sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));\n\nasync function welcome() {\n  const rainbowTitle = chalkAnimation.rainbow(\n    \"Senior Scene Wants To Setup Your Project? \\n\"\n  );\n\n  await sleep();\n  rainbowTitle.stop();\n}\n\nasync function questionPath() {\n  const answers = await inquirer.prompt({\n    name: \"project_path\",\n    type: \"input\",\n    message: \"What is your project path?\",\n    default() {\n      return program.projectPath;\n    },\n  });\n\n  program.projectPath = answers.project_path;\n}\n\n// function winner() {\n//   console.clear();\n//   figlet(`Congrats , ${projectPath} !\\n $ 1 , 0 0 0 , 0 0 0`, (err, data) => {\n//     console.log(gradient.pastel.multiline(data) + \"\\n\");\n\n//     console.log(\n//       chalk.green(\n//         `Programming isn't about what you know; it's about making the command line look cool`\n//       )\n//     );\n//     process.exit(0);\n//   });\n// }\n\nasync function spinnerEffect(text: string) {\n  const spinner = createSpinner(\"Checking answer...\").start();\n\n  await sleep();\n  spinner.success({\n    text,\n  });\n}\n\nasync function questionAppType() {\n  const answers = await inquirer.prompt({\n    name: \"question\",\n    type: \"list\",\n    message: \"What type of project you going to build?\\n\",\n    choices: [\"Fullstack\", \"Frontend\", \"Backend\"],\n  });\n  //spinnerEffect(answers.question);\n  program.projectType = answers.question;\n}\n\nasync function questionFrontend() {\n  const answers = await inquirer.prompt({\n    name: \"question\",\n    type: \"list\",\n    message: \"What is your frontend tech?\\n\",\n    choices: [\"React + vite\"],\n  });\n  // spinnerEffect(answers.question);\n  program.projectStack = answers.question;\n}\n\nconsole.clear();\nasync function PromiseAll() {\n  // await welcome();\n  // await questionPath();\n  // await questionAppType();\n  // await questionFrontend();\n\n  //winner();\n  console.log(\"Program ==> \", program);\n  downloadTemplate(program);\n  // try {\n  //   const { stdout } = await execa(\"ls\", [\"-al\"]);\n  //   console.log(stdout);\n  // } catch (error) {\n  //   console.error(\"Error executing command:\", error);\n  // }\n  //=> 'unicorns'\n}\n\nPromiseAll();\n"],"mappings":";AAcA,OAAOA,MAAc,WAErB,OAAOC,MAAoB,kBAE3B,OAAS,iBAAAC,MAAqB,cAC9B,OAAS,SAAAC,MAAa,QACtB,OAAOC,MAAU,OAEjB,OAAS,YAAYC,MAAU,KAE/B,OAAS,iBAAAC,MAAqB,MAC9B,IAAMC,EAAaD,EAAc,YAAY,GAAG,EAC1CE,EAAYJ,EAAK,QAAQG,CAAU,EAQnCE,EAAmB,CACvB,YAAa,WACb,aAAc,eACd,YAAa,cACf,EAEA,eAAeC,EAAaC,EAAkBC,EAAiB,CAC7D,GAAI,CACF,MAAMP,EAAG,WAAWM,EAAUC,CAAO,CACvC,OAASC,EAAP,CACA,QAAQ,MAAM,2BAA4BA,CAAK,CACjD,CACF,CAEA,eAAeC,EAAiB,CAAE,YAAAC,CAAY,EAAQ,CACpD,GAAI,CACF,IAAMC,EAAU,qCACVC,EAAe,sCACfC,EAAkBd,EAAK,KAAKI,EAAWO,CAAW,EAGxD,MAAMZ,EAAM,MAAO,CAAC,QAASa,EAAS,WAAW,CAAC,EAGlD,MAAMb,EAAM,KAAM,CAAC,KAAM,aAAac,MAAkBC,CAAe,CAAC,EAExE,MAAMf,EAAM,KAAM,CAAC,MAAO,WAAW,CAAC,EACtC,MAAMA,EAAM,KAAM,CAAC,aAAc,YAAY,EAAG,CAAE,IAAKe,CAAgB,CAAC,EACxE,MAAMf,EAAM,MAAO,CAAC,SAAS,EAAG,CAC9B,IAAKe,CACP,CAAC,EACD,MAAMf,EAAM,MAAO,CAAC,UAAW,cAAe,UAAW,cAAc,EAAG,CACxE,IAAKe,CACP,CAAC,EAID,MAAMf,EAAM,KAAM,CAAC,MAAO,KAAK,EAAG,CAAE,IAAKe,CAAgB,CAAC,EAI1D,MAAMf,EAAM,QAAS,CAAC,KAAK,EAAG,CAAE,IAAKe,CAAgB,CAAC,EACtD,MAAMf,EAAM,QAAS,CAAC,WAAW,EAAG,CAAE,IAAKe,EAAkB,MAAO,CAAC,EACrE,MAAMR,EACJQ,EAAkB,iBAClB;AAAA;AAAA;AAAA,CACF,EAEA,QAAQ,IAAI,kCAAkC,CAChD,OAASL,EAAP,CACA,QAAQ,MAAM,SAAUA,CAAK,CAC/B,CACF,CAuEA,QAAQ,MAAM,EACd,eAAeM,GAAa,CAO1B,QAAQ,IAAI,eAAgBC,CAAO,EACnCC,EAAiBD,CAAO,CAQ1B,CAEAD,EAAW","names":["inquirer","chalkAnimation","createSpinner","execa","path","fs","fileURLToPath","__filename","__dirname","program","appendToFile","filePath","content","error","downloadTemplate","projectPath","repoUrl","templatePath","destinationPath","PromiseAll","program","downloadTemplate"]}